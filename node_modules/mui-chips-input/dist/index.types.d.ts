/// <reference types="react" />
import type { ChipProps as MuiChipProps } from '@mui/material/Chip';
import type { TextFieldProps as MuiTextFieldProps } from '@mui/material/TextField';
declare type TextFieldProps = Omit<MuiTextFieldProps, 'onChange' | 'select' | 'type' | 'multiline' | 'defaultValue'>;
export declare type MuiChipsInputChipProps = MuiChipProps & {
    key: string;
    index: number;
    label: string;
    title: string;
    isEditing: boolean;
    disableEdition?: boolean;
    size: MuiChipProps['size'];
    disabled: MuiChipProps['disabled'];
    onDelete: (index: number) => void;
    onEdit: (index: number) => void;
};
export declare type MuiChipsInputChipComponent = React.ElementType<MuiChipsInputChipProps>;
export declare type MuiChipsInputChip = string;
export interface BaseMuiChipsInputProps {
    value?: MuiChipsInputChip[];
    onInputChange?: (inputValue: string) => void;
    inputValue?: string;
    onAddChip?: (chipValue: MuiChipsInputChip, chipIndex: number) => void;
    onDeleteChip?: (chipValue: MuiChipsInputChip, chipIndex: number) => void;
    onEditChip?: (chipValue: MuiChipsInputChip, chipIndex: number) => void;
    onChange?: (value: MuiChipsInputChip[]) => void;
    addOnWhichKey?: string[] | string;
    renderChip?: (ChipComponent: MuiChipsInputChipComponent, ChipProps: MuiChipsInputChipProps) => JSX.Element;
    clearInputOnBlur?: boolean;
    hideClearAll?: boolean;
    disableEdition?: boolean;
    disableDeleteOnBackspace?: boolean;
    validate?: (chipValue: MuiChipsInputChip) => boolean | {
        isError: boolean;
        textError: string;
    };
}
export declare type MuiChipsInputProps = TextFieldProps & BaseMuiChipsInputProps;
export {};
